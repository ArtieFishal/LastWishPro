<!DOCTYPE html>
<html>
<head>
    <title>Last Wish - Crypto Estate Planning</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #1a1a2e; color: white; }
        .container { max-width: 800px; margin: 0 auto; }
        h1 { color: #667eea; text-align: center; }
        .section { background: #2a2a4e; padding: 20px; margin: 20px 0; border-radius: 10px; }
        button { background: #667eea; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin: 5px; }
        button:hover { background: #5a6fd8; }
        input, select, textarea { width: 100%; padding: 8px; margin: 5px 0; border: 1px solid #ccc; border-radius: 4px; }
        .hidden { display: none; }
        .payment-box { background: #4a4a2e; border: 2px solid #ffc107; padding: 20px; text-align: center; }
        .success { background: #2e4a2e; border: 2px solid #28a745; }
        .price { font-size: 24px; font-weight: bold; color: #28a745; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Last Wish - Cryptocurrency Estate Planning</h1>
        
        <!-- Wallet Section -->
        <div class="section">
            <h2>üîê Connect Your Wallet</h2>
            <div id="wallet-disconnected">
                <p>Connect your MetaMask wallet to begin.</p>
                <button onclick="connectWallet()">ü¶ä Connect MetaMask</button>
            </div>
            <div id="wallet-connected" class="hidden">
                <p>‚úÖ <strong>Wallet Connected</strong></p>
                <p>Address: <span id="wallet-address"></span></p>
                <p>Balance: <span id="wallet-balance"></span> ETH</p>
                <button onclick="showForm()">Continue with This Wallet</button>
                <button onclick="disconnectWallet()">Disconnect</button>
            </div>
        </div>

        <!-- Form Section -->
        <div id="document-form" class="section hidden">
            <h2>üìÑ Estate Planning Document</h2>
            
            <h3>Personal Information</h3>
            <input type="text" id="fullName" placeholder="Full Legal Name" required>
            <input type="date" id="dateOfBirth" required>
            <input type="text" id="ssn" placeholder="SSN (Last 4 digits)" maxlength="4" required>
            <select id="state" required>
                <option value="">Select State</option>
                <option value="CA">California</option>
                <option value="NY">New York</option>
                <option value="TX">Texas</option>
                <option value="FL">Florida</option>
                <option value="IL">Illinois</option>
            </select>
            <textarea id="address" placeholder="Residential Address" required></textarea>

            <h3>Digital Assets</h3>
            <p>Connected Wallet: <span id="form-wallet-address"></span></p>
            <p>ETH Balance: <span id="form-wallet-balance"></span> ETH</p>
            <select id="documentType" required>
                <option value="">Select Document Type</option>
                <option value="will-addendum">Will Addendum</option>
                <option value="trust-amendment">Trust Amendment</option>
                <option value="standalone">Standalone Digital Asset Document</option>
            </select>
            <textarea id="additionalAssets" placeholder="Additional Cryptocurrency Holdings (optional)"></textarea>

            <h3>Primary Beneficiary</h3>
            <input type="text" id="beneficiaryName" placeholder="Beneficiary Full Name" required>
            <select id="beneficiaryRelationship" required>
                <option value="">Select Relationship</option>
                <option value="spouse">Spouse</option>
                <option value="child">Child</option>
                <option value="parent">Parent</option>
                <option value="sibling">Sibling</option>
                <option value="other">Other</option>
            </select>
            <textarea id="beneficiaryContact" placeholder="Beneficiary Contact Information"></textarea>

            <h3>Executor/Digital Asset Manager</h3>
            <input type="text" id="executorName" placeholder="Executor Full Name" required>
            <textarea id="executorContact" placeholder="Executor Contact Information" required></textarea>
            <textarea id="specialInstructions" placeholder="Special Instructions (optional)"></textarea>

            <h3>Legal Declarations</h3>
            <label><input type="checkbox" id="soundMind" required> I am of sound mind and legal capacity</label><br>
            <label><input type="checkbox" id="voluntary" required> I am making this document voluntarily</label><br>
            <label><input type="checkbox" id="compliance" required> I understand state law compliance requirements</label><br>

            <h3>Signature</h3>
            <input type="text" id="digitalSignature" placeholder="Digital Signature (Type Full Name)" required>
            <input type="date" id="signatureDate" required>

            <!-- Payment Section -->
            <div id="payment-section" class="payment-box">
                <h3>üí≥ Payment Required</h3>
                <p>A one-time fee is required to generate your legal document.</p>
                <div class="price">$14.20</div>
                <p>‚úÖ Professional legal formatting<br>‚úÖ State compliance checking<br>‚úÖ Notarization-ready output</p>
                <button onclick="showPaymentOptions()">Pay $14.20 & Generate Document</button>
            </div>

            <div id="payment-completed" class="payment-box success hidden">
                <h3>‚úÖ Payment Completed</h3>
                <p>Your payment has been processed. Generate your document below.</p>
                <button onclick="generatePDF()">Generate Legal Document PDF</button>
            </div>
        </div>

        <!-- Payment Modal -->
        <div id="payment-modal" class="section hidden">
            <h3>Complete Payment - $14.20</h3>
            <div id="crypto-payment" class="hidden">
                <button onclick="processCryptoPayment()">ü¶ä Pay with MetaMask (‚âà 0.004 ETH)</button>
            </div>
            <button onclick="processCardPayment()">üí≥ Pay with Credit/Debit Card</button>
            <button onclick="closePaymentModal()">Cancel</button>
        </div>
    </div>

    <script>
        let walletConnected = false;
        let walletAddress = '';
        let walletBalance = '0.00';
        let paymentCompleted = false;

        // Set today's date
        document.getElementById('signatureDate').value = new Date().toISOString().split('T')[0];

        async function connectWallet() {
            if (typeof window.ethereum === 'undefined') {
                alert('MetaMask not installed! Please install MetaMask.');
                return;
            }

            try {
                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
                if (accounts.length > 0) {
                    walletConnected = true;
                    walletAddress = accounts[0];
                    
                    const balance = await window.ethereum.request({
                        method: 'eth_getBalance',
                        params: [accounts[0], 'latest']
                    });
                    walletBalance = (parseInt(balance, 16) / Math.pow(10, 18)).toFixed(4);
                    
                    updateWalletUI();
                    alert('Wallet connected: ' + accounts[0].substring(0, 6) + '...' + accounts[0].substring(38));
                }
            } catch (error) {
                alert('Failed to connect wallet: ' + error.message);
            }
        }

        function disconnectWallet() {
            walletConnected = false;
            walletAddress = '';
            walletBalance = '0.00';
            updateWalletUI();
            document.getElementById('document-form').classList.add('hidden');
            alert('Wallet disconnected');
        }

        function updateWalletUI() {
            if (walletConnected) {
                document.getElementById('wallet-disconnected').classList.add('hidden');
                document.getElementById('wallet-connected').classList.remove('hidden');
                document.getElementById('crypto-payment').classList.remove('hidden');
                document.getElementById('wallet-address').textContent = walletAddress.substring(0, 6) + '...' + walletAddress.substring(38);
                document.getElementById('wallet-balance').textContent = walletBalance;
            } else {
                document.getElementById('wallet-disconnected').classList.remove('hidden');
                document.getElementById('wallet-connected').classList.add('hidden');
                document.getElementById('crypto-payment').classList.add('hidden');
            }
        }

        function showForm() {
            document.getElementById('document-form').classList.remove('hidden');
            document.getElementById('form-wallet-address').textContent = walletAddress.substring(0, 6) + '...' + walletAddress.substring(38);
            document.getElementById('form-wallet-balance').textContent = walletBalance;
        }

        function showPaymentOptions() {
            document.getElementById('payment-modal').classList.remove('hidden');
        }

        function closePaymentModal() {
            document.getElementById('payment-modal').classList.add('hidden');
        }

        function processCryptoPayment() {
            alert('Processing crypto payment...');
            setTimeout(completePayment, 2000);
        }

        function processCardPayment() {
            alert('Processing card payment...');
            setTimeout(completePayment, 1500);
        }

        function completePayment() {
            paymentCompleted = true;
            closePaymentModal();
            document.getElementById('payment-section').classList.add('hidden');
            document.getElementById('payment-completed').classList.remove('hidden');
            alert('‚úÖ Payment successful! You can now generate your document.');
        }

        function generatePDF() {
            // Validate form
            const required = ['fullName', 'dateOfBirth', 'ssn', 'state', 'address', 'documentType', 'beneficiaryName', 'beneficiaryRelationship', 'executorName', 'executorContact', 'digitalSignature', 'signatureDate'];
            for (let field of required) {
                if (!document.getElementById(field).value) {
                    alert('Please fill in all required fields: ' + field);
                    return;
                }
            }

            if (!document.getElementById('soundMind').checked || !document.getElementById('voluntary').checked || !document.getElementById('compliance').checked) {
                alert('Please check all legal declarations.');
                return;
            }

            // Collect data
            const data = {
                fullName: document.getElementById('fullName').value,
                dateOfBirth: document.getElementById('dateOfBirth').value,
                ssn: document.getElementById('ssn').value,
                state: document.getElementById('state').value,
                address: document.getElementById('address').value,
                walletAddress: walletAddress,
                walletBalance: walletBalance,
                documentType: document.getElementById('documentType').value,
                additionalAssets: document.getElementById('additionalAssets').value,
                beneficiaryName: document.getElementById('beneficiaryName').value,
                beneficiaryRelationship: document.getElementById('beneficiaryRelationship').value,
                beneficiaryContact: document.getElementById('beneficiaryContact').value,
                executorName: document.getElementById('executorName').value,
                executorContact: document.getElementById('executorContact').value,
                specialInstructions: document.getElementById('specialInstructions').value,
                digitalSignature: document.getElementById('digitalSignature').value,
                signatureDate: document.getElementById('signatureDate').value
            };

            // Create document content
            const content = `
CRYPTOCURRENCY ESTATE PLANNING ADDENDUM

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

PERSONAL INFORMATION:
Name: ${data.fullName}
Date of Birth: ${data.dateOfBirth}
SSN (Last 4): ${data.ssn}
State: ${data.state}
Address: ${data.address}

DIGITAL ASSETS:
Wallet Address: ${data.walletAddress}
ETH Balance: ${data.walletBalance} ETH
Additional Assets: ${data.additionalAssets || 'None specified'}

DOCUMENT TYPE: ${data.documentType}

PRIMARY BENEFICIARY:
Name: ${data.beneficiaryName}
Relationship: ${data.beneficiaryRelationship}
Contact: ${data.beneficiaryContact || 'Not provided'}

EXECUTOR/DIGITAL ASSET MANAGER:
Name: ${data.executorName}
Contact: ${data.executorContact}
Instructions: ${data.specialInstructions || 'None provided'}

LEGAL DECLARATIONS:
‚òë I am of sound mind and legal capacity
‚òë I am making this document voluntarily
‚òë I understand state law compliance requirements

SIGNATURE: ${data.digitalSignature}
DATE: ${data.signatureDate}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

WITNESS SECTION (Complete after printing):

Witness 1:
Name: _________________________________
Address: ______________________________
Signature: ____________________________
Date: _________________________________

Witness 2:
Name: _________________________________
Address: ______________________________
Signature: ____________________________
Date: _________________________________

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

NOTARIZATION SECTION:

State of: _____________________________
County of: ___________________________

On this _____ day of _________, 20__, before me appeared ${data.fullName}, 
who proved to me on satisfactory evidence to be the person whose name is 
subscribed to the within instrument and acknowledged execution thereof.

I certify under PENALTY OF PERJURY under the laws of ${data.state} that 
the foregoing is true and correct.

Notary Public: ________________________
Signature: ____________________________
Seal: [ NOTARY SEAL ]
Commission Expires: ___________________

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Generated by Last Wish Platform
Date: ${new Date().toLocaleString()}
Document ID: LW-${Date.now()}
Payment: $14.20 confirmed

LEGAL NOTICE: This document must be printed, signed with witnesses, 
and notarized according to your state's laws to be legally valid.
`;

            // Download the document
            const blob = new Blob([content], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `Last_Wish_Document_${data.fullName.replace(/\s+/g, '_')}_${Date.now()}.txt`;
            a.click();
            URL.revokeObjectURL(url);

            alert('‚úÖ Document generated and downloaded!\n\nNext steps:\n1. Print the document\n2. Sign with 2 witnesses\n3. Get notarized\n4. Store securely');
        }

        // Check for existing wallet connection
        window.addEventListener('load', async () => {
            if (typeof window.ethereum !== 'undefined') {
                try {
                    const accounts = await window.ethereum.request({ method: 'eth_accounts' });
                    if (accounts.length > 0) {
                        walletConnected = true;
                        walletAddress = accounts[0];
                        const balance = await window.ethereum.request({
                            method: 'eth_getBalance',
                            params: [accounts[0], 'latest']
                        });
                        walletBalance = (parseInt(balance, 16) / Math.pow(10, 18)).toFixed(4);
                        updateWalletUI();
                    }
                } catch (error) {
                    console.error('Error checking wallet:', error);
                }
            }
        });
    </script>
</body>
</html>

