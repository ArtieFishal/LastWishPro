// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  walletAddress String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  connectedWallets ConnectedWallet[]
  beneficiaries    Beneficiary[]
  willDocuments    WillDocument[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// LastWish.eth specific models
model ConnectedWallet {
  id              String   @id @default(cuid())
  userId          String
  blockchain      String
  address         String
  walletType      String
  isVerified      Boolean  @default(false)
  signedMessage   String?
  signedAt        DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  discoveredAssets Asset[]

  @@unique([userId, blockchain, address])
}

model Asset {
  id              String   @id @default(cuid())
  walletId        String
  type            AssetType
  symbol          String
  name            String
  contractAddress String?
  tokenId         String?
  balance         String
  decimals        Int?
  discoveredAt    DateTime @default(now())
  updatedAt       DateTime @updatedAt

  wallet ConnectedWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, contractAddress, tokenId])
}

model Beneficiary {
  id                   String   @id @default(cuid())
  userId               String
  fullName             String
  relationship         String
  ethAddress           String
  ensName              String?
  phoneNumber          String
  email                String
  physicalAddress      String
  twitterHandle        String?
  otherSocialMedia     String?
  emergencyContact     String?
  allocationPercentage Float
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WillDocument {
  id                   String   @id @default(cuid())
  userId               String
  version              Int      @default(1)
  generatedAt          DateTime @default(now())
  pdfPath              String?
  isActive             Boolean  @default(true)
  walletSnapshot       Json
  beneficiarySnapshot  Json
  legalText            String   @db.Text
  userSignature        String?
  witnessSignatures    Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AssetType {
  NATIVE
  TOKEN
  NFT
}
